{
	"info": {
		"_postman_id": "0fa33dba-4ff4-4254-80ce-41f395e09b48",
		"name": "PCDACO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30663183"
	},
	"item": [
		{
			"name": "PCDACO",
			"item": [
				{
					"name": "Amenity",
					"item": [
						{
							"name": "Get All Amenities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Kiểm tra status code\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Kiểm tra cấu trúc response\r",
											"pm.test(\"Response structure is valid\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.keys(\"value\", \"isSuccess\", \"message\");\r",
											"    pm.expect(response.value).to.have.keys(\"items\", \"totalItems\", \"pageNumber\", \"pageSize\");\r",
											"});\r",
											"\r",
											"// Kiểm tra số lượng items trả về đúng pageSize\r",
											"pm.test(\"Returned items count matches pageSize\", () => {\r",
											"    const response = pm.response.json();\r",
											"    const expectedSize = parseInt(pm.environment.get(\"pageSize\"), 10); // Convert to number\r",
											"    pm.expect(response.value.items.length).to.eql(expectedSize);\r",
											"});\r",
											"\r",
											"// Kiểm tra các trường dữ liệu trong items\r",
											"pm.test(\"Each amenity has valid fields\", () => {\r",
											"    const items = pm.response.json().value.items;\r",
											"    items.forEach((amenity) => {\r",
											"        pm.expect(amenity).to.have.keys(\"id\", \"name\", \"description\", \"createdAt\");\r",
											"        pm.expect(amenity.id).to.be.a(\"string\");\r",
											"        pm.expect(amenity.name).to.be.a(\"string\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Set default values if environment variables are missing\r",
											"if (typeof pm.environment.get(\"pageNumber\") !== \"number\") {\r",
											"    pm.environment.set(\"pageNumber\", 1);\r",
											"}\r",
											"\r",
											"if (typeof pm.environment.get(\"pageSize\") !== \"number\") {\r",
											"    pm.environment.set(\"pageSize\", 10);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/amenities?pageNumber={{pageNumber}}&pageSize={{pageSize}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"amenities"
									],
									"query": [
										{
											"key": "pageNumber",
											"value": "{{pageNumber}}"
										},
										{
											"key": "pageSize",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Amenity By Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Create request for get by Id\r",
											"const createRequest = {\r",
											"    url: pm.environment.get(\"baseUrl\") + \"/api/amenities\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'Bearer ' + pm.environment.get(\"adminToken\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            name: \"Test Amenity for Get By ID\",\r",
											"            description: \"Temporary amenity for Get By Id test\"\r",
											"        })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createRequest, (err, response) => {\r",
											"    if (err) console.error(err);\r",
											"    else {\r",
											"        const createdAmenityId = response.json().value.id;\r",
											"        pm.environment.set(\"amenityId\", createdAmenityId);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid amenity data\", () => {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.isSuccess).to.be.true;\r",
											"    pm.expect(response.value.id).to.eql(pm.environment.get(\"amenityId\"));\r",
											"    pm.expect(response.value.name).to.eql(\"Test Amenity for Get By ID\");\r",
											"});\r",
											"\r",
											"// Test 2: Cleanup after test (optional)\r",
											"const deleteRequest = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/amenities/${pm.environment.get(\"amenityId\")}`,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"adminToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(deleteRequest, (err) => {\r",
											"    if (err) console.error(\"Cleanup failed:\", err);\r",
											"    else pm.environment.unset(\"amenityId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{baseUrl}}/api/amenities/{{amenityId}}",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"amenities",
										"{{amenityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Amenity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate unique values using Postman's built-in utilities\r",
											"const prefix = new Date().getTime() // Unique prefix using timestamp\r",
											"\r",
											"pm.environment.set(\"amenityName\", `Amenity_${prefix}`);\r",
											"pm.environment.set(\"amenityDescription\", `Amenity_${prefix}_description`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify successful create\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message verification\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSuccess).to.be.true;\r",
											"});\r",
											"\r",
											"// Test 2: Cleanup after test (optional)\r",
											"const deleteRequest = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/amenities/${pm.environment.get(\"amenityId\")}`,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"adminToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(deleteRequest, (err) => {\r",
											"    if (err) console.error(\"Cleanup failed:\", err);\r",
											"    else pm.environment.unset(\"amenityId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{amenityName}}\",\r\n  \"description\": \"{{amenityDescription}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{baseUrl}}/api/amenities",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"amenities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Amenity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate unique name to avoid conflicts\r",
											"const timestamp = new Date().getTime();\r",
											"const uniqueName = `TestAmenity-${timestamp}`;\r",
											"\r",
											"// Create request for update\r",
											"const createRequest = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/amenities`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"adminToken\")}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            name: uniqueName,\r",
											"            description: \"Temporary amenity for update test\"\r",
											"        })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createRequest, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Creation failed:\", err);\r",
											"        throw err;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 201 && response.json().value.id) {\r",
											"        const createdAmenityId = response.json().value.id;\r",
											"        pm.environment.set(\"amenityId\", createdAmenityId);\r",
											"        console.log(\"Created amenity ID:\", createdAmenityId);\r",
											"    } else {\r",
											"        console.error(\"Failed to create amenity:\", response.json());\r",
											"        throw new Error(\"Pre-request setup failed\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify successful update\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message verification\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSuccess).to.be.true;\r",
											"    pm.expect(jsonData.message).to.eql(\"Cập nhật tiện nghi thành công\");\r",
											"});\r",
											"\r",
											"// Test 2: Cleanup after test (optional)\r",
											"const deleteRequest = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/amenities/${pm.environment.get(\"amenityId\")}`,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"adminToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(deleteRequest, (err) => {\r",
											"    if (err) console.error(\"Cleanup failed:\", err);\r",
											"    else pm.environment.unset(\"amenityId\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Updated Amenity Name\",\r\n  \"description\": \"Updated description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{baseUrl}}/api/amenities/{{amenityId}}",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"amenities",
										"{{amenityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Amenity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate unique test data first\r",
											"const timestamp = new Date().getTime();\r",
											"const uniqueName = `TestAmenity-${timestamp}`;\r",
											"\r",
											"const createRequest = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/amenities`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"adminToken\")}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            name: uniqueName,\r",
											"            description: \"For deletion test\"\r",
											"        })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createRequest, (err, response) => {\r",
											"    if (err) {\r",
											"        pm.expect.fail(\"Pre-request failed: \" + err);\r",
											"        return;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 201) {\r",
											"        pm.environment.set(\"amenityId\", response.json().value.id);\r",
											"        console.log(\"Created amenity ID:\", pm.environment.get(\"amenityId\"));\r",
											"    } else {\r",
											"        pm.expect.fail(\"Creation failed: \" + response.body);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Verify successful deletion\r",
											"pm.test(\"Success Response - 200 OK\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Valid success response structure\", () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSuccess).to.be.true;\r",
											"    pm.expect(jsonData.message).to.eql(\"Xóa tiện nghi thành công\");\r",
											"});\r",
											"\r",
											"// Test 2: Verify ID is invalid after deletion\r",
											"pm.test(\"Verify resource is deleted\", () => {\r",
											"    const checkRequest = {\r",
											"        url: `${pm.environment.get(\"baseUrl\")}/api/amenities/${pm.environment.get(\"amenityId\")}`,\r",
											"        method: 'GET',\r",
											"        header: {\r",
											"            'Authorization': `Bearer ${pm.environment.get(\"adminToken\")}`\r",
											"        }\r",
											"    };\r",
											"\r",
											"    pm.sendRequest(checkRequest, (err, response) => {\r",
											"        pm.expect(response.code).to.eql(404);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://{{baseUrl}}/api/amenities/{{amenityId}}",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"amenities",
										"{{amenityId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auth",
					"item": [
						{
							"name": "SignUp Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save tokens to environment variables\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"driverToken\", jsonData.value.accessToken);\r",
											"pm.environment.set(\"driverRefreshToken\", jsonData.value.refreshToken);\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.value).to.exist;\r",
											"    pm.expect(responseData.isSuccess).to.exist;\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Access token and refresh token are non-empty strings\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.value.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
											"  pm.expect(responseData.value.refreshToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"IsSuccess is a boolean\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate unique values using Postman's built-in utilities\r",
											"const prefix = Date.now(); // Unique prefix using timestamp\r",
											"\r",
											"// Function to generate random password\r",
											"function generateStrongPassword(length = 12) {\r",
											"    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const numbers = '0123456789';\r",
											"    const symbols = '!@#$%^&*()-_=+';\r",
											"\r",
											"    // Ensure at least one character from each set\r",
											"    let password = [\r",
											"        lowercase[Math.floor(Math.random() * lowercase.length)],\r",
											"        uppercase[Math.floor(Math.random() * uppercase.length)],\r",
											"        numbers[Math.floor(Math.random() * numbers.length)],\r",
											"        symbols[Math.floor(Math.random() * symbols.length)]\r",
											"    ];\r",
											"\r",
											"    // Fill remaining characters with random selection from all sets\r",
											"    const allChars = lowercase + uppercase + numbers + symbols;\r",
											"    for (let i = password.length; i < length; i++) {\r",
											"        password.push(allChars[Math.floor(Math.random() * allChars.length)]);\r",
											"    }\r",
											"\r",
											"    // Shuffle the array and join to create final password\r",
											"    return password.sort(() => Math.random() - 0.5).join('');\r",
											"}\r",
											"\r",
											"// Random Address Generator\r",
											"function generateRandomAddress() {\r",
											"    const streets = ['Main St', 'Oak Ave', 'Pine Rd', 'Maple Dr', 'Cedar Ln'];\r",
											"    const cities = [\r",
											"        { city: 'Springfield', state: 'IL', zip: '62704' },\r",
											"        { city: 'Phoenix', state: 'AZ', zip: '85001' },\r",
											"        { city: 'Austin', state: 'TX', zip: '73301' },\r",
											"        { city: 'Denver', state: 'CO', zip: '80202' },\r",
											"        { city: 'Orlando', state: 'FL', zip: '32801' }\r",
											"    ];\r",
											"    \r",
											"    return `${Math.floor(Math.random() * 9999) + 1} ${\r",
											"        streets[Math.floor(Math.random() * streets.length)]\r",
											"    }, ${\r",
											"        cities[Math.floor(Math.random() * cities.length)].city\r",
											"    }, ${\r",
											"        cities[Math.floor(Math.random() * cities.length)].state\r",
											"    } ${String(Math.floor(10000 + Math.random() * 90000)).slice(0,5)}`;\r",
											"}\r",
											"\r",
											"// Random Date of Birth Generator (18-100 years old)\r",
											"function generateRandomDateOfBirth() {\r",
											"    const now = new Date();\r",
											"    const currentYear = now.getFullYear();\r",
											"    const birthYear = currentYear - 18 - Math.floor(Math.random() * 82);\r",
											"    const birthMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');\r",
											"    const birthDay = String(Math.floor(Math.random() * 28) + 1).padStart(2, '0');\r",
											"    const hours = String(Math.floor(Math.random() * 24)).padStart(2, '0');\r",
											"    const minutes = String(Math.floor(Math.random() * 60)).padStart(2, '0');\r",
											"    const seconds = String(Math.floor(Math.random() * 60)).padStart(2, '0');\r",
											"    const milliseconds = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\r",
											"\r",
											"    return `${birthYear}-${birthMonth}-${birthDay}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;\r",
											"}\r",
											"\r",
											"// Set variables for the request\r",
											"pm.environment.set(\"name\", `User_${prefix}`);\r",
											"pm.environment.set(\"email\", `user_${prefix}@example.com`);\r",
											"pm.environment.set(\"password\", generateStrongPassword());\r",
											"pm.environment.set(\"address\", generateRandomAddress());\r",
											"pm.environment.set(\"dateOfBirth\", generateRandomDateOfBirth());\r",
											"pm.environment.set(\"phone\", `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"driver\",\r\n  \"email\": \"baomnlse171157@fpt.edu.vn\",\r\n  \"password\": \"12345678\",\r\n  \"address\": \"{{address}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"phone\": \"{{driverPhone}}\",\r\n  \"roleName\": \"driver\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "SignUp Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Save tokens to environment variables\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"ownerToken\", jsonData.value.accessToken);\r",
											"pm.environment.set(\"ownerRefreshToken\", jsonData.value.refreshToken);\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.value).to.exist;\r",
											"    pm.expect(responseData.isSuccess).to.exist;\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Access token and refresh token are non-empty strings\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.value.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
											"  pm.expect(responseData.value.refreshToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"IsSuccess is a boolean\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate unique values using Postman's built-in utilities\r",
											"const prefix = Date.now(); // Unique prefix using timestamp\r",
											"\r",
											"// Function to generate random password\r",
											"function generateStrongPassword(length = 12) {\r",
											"    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const numbers = '0123456789';\r",
											"    const symbols = '!@#$%^&*()-_=+';\r",
											"\r",
											"    // Ensure at least one character from each set\r",
											"    let password = [\r",
											"        lowercase[Math.floor(Math.random() * lowercase.length)],\r",
											"        uppercase[Math.floor(Math.random() * uppercase.length)],\r",
											"        numbers[Math.floor(Math.random() * numbers.length)],\r",
											"        symbols[Math.floor(Math.random() * symbols.length)]\r",
											"    ];\r",
											"\r",
											"    // Fill remaining characters with random selection from all sets\r",
											"    const allChars = lowercase + uppercase + numbers + symbols;\r",
											"    for (let i = password.length; i < length; i++) {\r",
											"        password.push(allChars[Math.floor(Math.random() * allChars.length)]);\r",
											"    }\r",
											"\r",
											"    // Shuffle the array and join to create final password\r",
											"    return password.sort(() => Math.random() - 0.5).join('');\r",
											"}\r",
											"\r",
											"// Random Address Generator\r",
											"function generateRandomAddress() {\r",
											"    const streets = ['Main St', 'Oak Ave', 'Pine Rd', 'Maple Dr', 'Cedar Ln'];\r",
											"    const cities = [\r",
											"        { city: 'Springfield', state: 'IL', zip: '62704' },\r",
											"        { city: 'Phoenix', state: 'AZ', zip: '85001' },\r",
											"        { city: 'Austin', state: 'TX', zip: '73301' },\r",
											"        { city: 'Denver', state: 'CO', zip: '80202' },\r",
											"        { city: 'Orlando', state: 'FL', zip: '32801' }\r",
											"    ];\r",
											"    \r",
											"    return `${Math.floor(Math.random() * 9999) + 1} ${\r",
											"        streets[Math.floor(Math.random() * streets.length)]\r",
											"    }, ${\r",
											"        cities[Math.floor(Math.random() * cities.length)].city\r",
											"    }, ${\r",
											"        cities[Math.floor(Math.random() * cities.length)].state\r",
											"    } ${String(Math.floor(10000 + Math.random() * 90000)).slice(0,5)}`;\r",
											"}\r",
											"\r",
											"// Random Date of Birth Generator (18-100 years old)\r",
											"function generateRandomDateOfBirth() {\r",
											"    const now = new Date();\r",
											"    const currentYear = now.getFullYear();\r",
											"    const birthYear = currentYear - 18 - Math.floor(Math.random() * 82);\r",
											"    const birthMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');\r",
											"    const birthDay = String(Math.floor(Math.random() * 28) + 1).padStart(2, '0');\r",
											"    const hours = String(Math.floor(Math.random() * 24)).padStart(2, '0');\r",
											"    const minutes = String(Math.floor(Math.random() * 60)).padStart(2, '0');\r",
											"    const seconds = String(Math.floor(Math.random() * 60)).padStart(2, '0');\r",
											"    const milliseconds = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\r",
											"\r",
											"    return `${birthYear}-${birthMonth}-${birthDay}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;\r",
											"}\r",
											"\r",
											"// Set variables for the request\r",
											"pm.environment.set(\"name\", `User_${prefix}`);\r",
											"pm.environment.set(\"email\", `user_${prefix}@example.com`);\r",
											"pm.environment.set(\"password\", generateStrongPassword());\r",
											"pm.environment.set(\"address\", generateRandomAddress());\r",
											"pm.environment.set(\"dateOfBirth\", generateRandomDateOfBirth());\r",
											"pm.environment.set(\"phone\", `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"owner\",\r\n  \"email\": \"mglongbao@gmail.com\",\r\n  \"password\": \"12345678\",\r\n  \"address\": \"{{address}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"phone\": \"{{ownerPhone}}\",\r\n  \"roleName\": \"owner\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "SignIn Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify login succeeds\r",
											"pm.test(\"Login - Status 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response has access token\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  \r",
											"  // Check nested \"value\" object\r",
											"  pm.expect(jsonData.value).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.value.accessToken).to.be.a(\"string\");\r",
											"  \r",
											"  // Save tokens to environment variables\r",
											"  pm.environment.set(\"ownerToken\", jsonData.value.accessToken);\r",
											"  pm.environment.set(\"refreshToken\", jsonData.value.refreshToken);\r",
											"});\r",
											"\r",
											"// Optional: Verify success message\r",
											"pm.test(\"Login successful\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.isSuccess).to.eql(true);\r",
											"  pm.expect(jsonData.message).to.eql(\"Đăng nhập thành công\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{ownerEmail}}\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "SignIn Driver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify login succeeds\r",
											"pm.test(\"Login - Status 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response has access token\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  \r",
											"  // Check nested \"value\" object\r",
											"  pm.expect(jsonData.value).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.value.accessToken).to.be.a(\"string\");\r",
											"  \r",
											"  // Save tokens to environment variables\r",
											"  pm.environment.set(\"driverToken\", jsonData.value.accessToken);\r",
											"  pm.environment.set(\"driverRefreshToken\", jsonData.value.refreshToken);\r",
											"});\r",
											"\r",
											"// Optional: Verify success message\r",
											"pm.test(\"Login successful\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.isSuccess).to.eql(true);\r",
											"  pm.expect(jsonData.message).to.eql(\"Đăng nhập thành công\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{driverEmail}}\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin SignIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify login succeeds\r",
											"pm.test(\"Login - Status 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response has access token\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  \r",
											"  // Check nested \"value\" object\r",
											"  pm.expect(jsonData.value).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.value.accessToken).to.be.a(\"string\");\r",
											"  \r",
											"  // Save tokens to environment variables\r",
											"  pm.environment.set(\"adminToken\", jsonData.value.accessToken);\r",
											"  pm.environment.set(\"refreshToken\", jsonData.value.refreshToken);\r",
											"});\r",
											"\r",
											"// Optional: Verify success message\r",
											"pm.test(\"Login successful\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.isSuccess).to.eql(true);\r",
											"  pm.expect(jsonData.message).to.eql(\"Đăng nhập thành công\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{adminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/admin/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Bank Accounts",
					"item": [
						{
							"name": "Create Bank Account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get bank info\r",
											"const getBankInfos = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/bank-info?search=vietcombank`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"ownerToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getBankInfos, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Get Bank Info failed:\", err);\r",
											"        throw err;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 200) {\r",
											"        const getBankInfo = response.json().value[0].id;\r",
											"        pm.environment.set(\"bankInfoId\", getBankInfo);\r",
											"        console.log(\"bank info ID:\", getBankInfo);\r",
											"    } else {\r",
											"        console.error(\"Failed to get bank info:\", response.json());\r",
											"        throw new Error(\"Pre-request setup failed\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"bankAccountId\", jsonData.value.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Idempotence-Key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bankInfoId\": \"{{bankInfoId}}\",\r\n  \"accountNumber\": \"0401001493928\",\r\n  \"accountName\": \"MA NGOC LONG BAO\",\r\n  \"isPrimary\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bank-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bank-accounts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BankInfo",
					"item": [
						{
							"name": "Get All Bank Info",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/bank-info?search=vcb",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bank-info"
									],
									"query": [
										{
											"key": "search",
											"value": "vcb"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Booking",
					"item": [
						{
							"name": "Get Booking Contract",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"contracts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isApproved\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"cancel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete Booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"currentLatitude\": 10.841299,\r\n  \"currentLongitude\": 106.809188\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm Car Return",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/return",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"return"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"bookingId\", jsonData.value.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Idempotence-Key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"carId\": \"{{carId}}\",\r\n  \"startTime\": \"2025-03-20T09:59:38.502Z\",\r\n  \"endTime\": \"2025-03-21T09:59:38.502Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pre-Inspect Booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "exteriorPhotos",
											"type": "file",
											"src": [
												"/D:/Picture/350be82a-2a22-4f45-9e32-8c7eea05e820_671x372.jpg",
												"/D:/Picture/446192465_443604858287878_2789737694761021638_n.jpg"
											]
										},
										{
											"key": "fuelGaugePhotos",
											"type": "file",
											"src": "/D:/Picture/446220120_3612351175762314_5812113030619385094_n.jpg"
										},
										{
											"key": "carKeyPhotos",
											"type": "file",
											"src": "/D:/Picture/446254490_953132719844666_6268334298289454769_n.jpg"
										},
										{
											"key": "trunkPhotos",
											"type": "file",
											"src": "/D:/Picture/461896399_122149608668316121_4005523233581953540_n.jpg"
										},
										{
											"key": "parkingLocationPhotos",
											"type": "file",
											"src": "/D:/Picture/b64be7f149a73119a95bd4066d1666a1.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/pre-inspection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"pre-inspection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post-Inspect Booking",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "fuelGaugeFinalPhotos",
											"type": "file",
											"src": "/D:/Picture/GPjXTt3XcAEMswd.jpg"
										},
										{
											"key": "cleanlinessPhotos",
											"type": "file",
											"src": "/D:/Picture/e8453111f9c8fd9867eccf0cc6bce3db.jpg"
										},
										{
											"key": "scratchesPhotos",
											"value": "",
											"type": "file"
										},
										{
											"key": "tollFeesPhotos",
											"value": "",
											"type": "file"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/post-inspection",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"post-inspection"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mark Booking Ready For Pickup",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/ready-for-pickup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"ready-for-pickup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Start Booking Trip",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"latitude\": 10.841416800000001,\r\n  \"longitude\": 106.81007447258705\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/start-trip",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"start-trip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracking Booking GPS",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"latitude\": 10.84,\r\n  \"longitude\": 106.802494\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/track",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"track"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Booking Status",
					"item": []
				},
				{
					"name": "Car",
					"item": [
						{
							"name": "Create Car",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Get 2 amenities\r",
											"const getAmenities = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/amenities?index=1&size=2`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"ownerToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getAmenities, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Get Amenities failed:\", err);\r",
											"        throw err;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 200) {\r",
											"        const getAmenityId1 = response.json().value.items[0].id;\r",
											"        const getAmenityId2 = response.json().value.items[1].id;\r",
											"        pm.environment.set(\"amenityId-1\", getAmenityId1);\r",
											"        pm.environment.set(\"amenityId-2\", getAmenityId2);\r",
											"        console.log(\"amenity 1 ID:\", getAmenityId1);\r",
											"        console.log(\"amenity 2 ID:\", getAmenityId2);\r",
											"    } else {\r",
											"        console.error(\"Failed to get amenities:\", response.json());\r",
											"        throw new Error(\"Pre-request setup failed\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Get model\r",
											"const getModels = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/models?index=1&size=1`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"ownerToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getModels, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Get Model failed:\", err);\r",
											"        throw err;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 200) {\r",
											"        const getModelId1 = response.json().value.items[0].id;\r",
											"        pm.environment.set(\"modelId-1\", getModelId1);\r",
											"        console.log(\"model 1 ID:\", getModelId1);\r",
											"    } else {\r",
											"        console.error(\"Failed to get models:\", response.json());\r",
											"        throw new Error(\"Pre-request setup failed\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Get transmission type\r",
											"const getTransmissionType = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/transmission-types?index=1&size=1`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"ownerToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTransmissionType, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Get transmission type failed:\", err);\r",
											"        throw err;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 200) {\r",
											"        const getTransmissionTypeId1 = response.json().value.items[0].id;\r",
											"        pm.environment.set(\"transmissionTypeId-1\", getTransmissionTypeId1);\r",
											"        console.log(\"Transmission Type 1 ID:\", getTransmissionTypeId1);\r",
											"    } else {\r",
											"        console.error(\"Failed to get Transmission Type:\", response.json());\r",
											"        throw new Error(\"Pre-request setup failed\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Get fuel type\r",
											"const getFuelTypes = {\r",
											"    url: `${pm.environment.get(\"baseUrl\")}/api/fuel-types?index=1&size=1`,\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': `Bearer ${pm.environment.get(\"ownerToken\")}`\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getFuelTypes, (err, response) => {\r",
											"    if (err) {\r",
											"        console.error(\"Get fuel type failed:\", err);\r",
											"        throw err;\r",
											"    }\r",
											"    \r",
											"    if (response.code === 200) {\r",
											"        const getFuelTypeId1 = response.json().value.items[0].id;\r",
											"        pm.environment.set(\"fuelTypeId-1\", getFuelTypeId1);\r",
											"        console.log(\"Fuel Type 1 ID:\", getFuelTypeId1);\r",
											"    } else {\r",
											"        console.error(\"Failed to get Fuel Type:\", response.json());\r",
											"        throw new Error(\"Pre-request setup failed\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"carId\", jsonData.value.id);\r",
											"\r",
											"// Tests Script\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the correct structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.have.property('data');\r",
											"    pm.expect(jsonData.data).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('status');\r",
											"    pm.expect(jsonData.status).to.eql('Ok');\r",
											"});\r",
											"\r",
											"pm.test(\"Car was created with correct ID\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.id).to.be.a('string');\r",
											"    \r",
											"    // Store the created car ID for potential future requests\r",
											"    pm.environment.set(\"lastCreatedCarId\", jsonData.data.id);\r",
											"});\r",
											"\r",
											"// Additional validation can be added here based on your needs"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Idempotence-Key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amenityIds\": [\r\n    \"{{amenityId-1}}\", \"{{amenityId-2}}\"\r\n  ],\r\n  \"modelId\": \"{{modelId-1}}\",\r\n  \"transmissionTypeId\": \"{{transmissionTypeId-1}}\",\r\n  \"fuelTypeId\": \"{{fuelTypeId-1}}\",\r\n  \"licensePlate\": \"60Y6-5881\",\r\n  \"color\": \"red\",\r\n  \"seat\": 4,\r\n  \"description\": \"string\",\r\n  \"fuelConsumption\": 10,\r\n  \"requiresCollateral\": true,\r\n  \"price\": 2000,\r\n  \"pickupLatitude\": 10.841416800000001,\r\n  \"pickupLongitude\": 106.81007447258705,\r\n  \"pickupAddress\": \"Trường Đại học FPT TP.HCM, Lô E2a-7, Đường D1, Phường Long Thạnh Mỹ, Thành phố Thủ Đức, Thành phố Hồ Chí Minh, 71216, Việt Nam\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/cars",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Car By Id",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/cars/01955a25-38ac-721a-9cc7-4b83a23b2f4e",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"cars",
										"01955a25-38ac-721a-9cc7-4b83a23b2f4e"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fuels",
					"item": [
						{
							"name": "New Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/fuel-types",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"fuel-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "License",
					"item": [
						{
							"name": "Validate License",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "api_key",
										"value": "7uMz1EqukYe72VIbLeMeaGV3EeqhuTsq",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/D:/Picture/information/gplx.jpg"
										}
									]
								},
								"url": {
									"raw": "https://api.fpt.ai/vision/dlr/vnm",
									"protocol": "https",
									"host": [
										"api",
										"fpt",
										"ai"
									],
									"path": [
										"vision",
										"dlr",
										"vnm"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Driver License",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"licenseId\", jsonData.value.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{driverToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Idempotence-Key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"licenseNumber\": \"750214013807\",\r\n  \"expirationDate\": \"2025-03-25T12:05:40.976Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/license",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"license"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Owner License",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"licenseId\", jsonData.value.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Idempotence-Key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"licenseNumber\": \"750214013808\",\r\n  \"expirationDate\": \"2025-03-25T12:05:40.976Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/license",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"license"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve License",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isApproved\": true,\r\n  \"rejectReason\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/0195ac5d-f1af-706e-a867-c0086c649f5f/license/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"0195ac5d-f1af-706e-a867-c0086c649f5f",
										"license",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Pending License",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/licenses/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"licenses",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get License By Current User",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/licenses/users/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"licenses",
										"users",
										"current"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Models",
					"item": [
						{
							"name": "Get All Models",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/models",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"models"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Create Withdrawal Request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\"withdrawalId\", jsonData.value.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Idempotence-Key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bankAccountId\": \"{{bankAccountId}}\",\r\n  \"amount\": 1000000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/withdrawal",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"withdrawal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate QR Code",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/withdrawals/{{withdrawalId}}/qr",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"withdrawals",
										"{{withdrawalId}}",
										"qr"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Withdrawal Requests",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/withdrawals",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"withdrawals"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transmission Types",
					"item": [
						{
							"name": "New Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/transmission-types",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"transmission-types"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": []
				}
			]
		},
		{
			"name": "PCDACO - Test",
			"item": [
				{
					"name": "Booking",
					"item": [
						{
							"name": "Create Booking",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{driverToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"CarId\": \"{{carId}}\",\n  \"StartTime\": \"2025-03-01T10:00:00Z\",\n  \"EndTime\": \"2025-03-05T10:00:00Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Booking",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ownerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"IsApproved\": true }"
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"approve"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject Overlapping Bookings",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ownerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/bookings/{{bookingId}}/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings",
										"{{bookingId}}",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unauthorized Access",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer invalid_token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"CarId\": \"{{carId}}\",\n  \"StartTime\": \"2025-03-10T10:00:00Z\",\n  \"EndTime\": \"2025-03-15T10:00:00Z\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"bookings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "SignUp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.value).to.exist;\r",
											"    pm.expect(responseData.isSuccess).to.exist;\r",
											"    pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Access token and refresh token are non-empty strings\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.value.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");\r",
											"  pm.expect(responseData.value.refreshToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"IsSuccess is a boolean\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.isSuccess).to.be.a('boolean');\r",
											"});\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate unique values using Postman's built-in utilities\r",
											"const prefix = Date.now(); // Unique prefix using timestamp\r",
											"\r",
											"// Function to generate random password\r",
											"function generateStrongPassword(length = 12) {\r",
											"    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
											"    const numbers = '0123456789';\r",
											"    const symbols = '!@#$%^&*()-_=+';\r",
											"\r",
											"    // Ensure at least one character from each set\r",
											"    let password = [\r",
											"        lowercase[Math.floor(Math.random() * lowercase.length)],\r",
											"        uppercase[Math.floor(Math.random() * uppercase.length)],\r",
											"        numbers[Math.floor(Math.random() * numbers.length)],\r",
											"        symbols[Math.floor(Math.random() * symbols.length)]\r",
											"    ];\r",
											"\r",
											"    // Fill remaining characters with random selection from all sets\r",
											"    const allChars = lowercase + uppercase + numbers + symbols;\r",
											"    for (let i = password.length; i < length; i++) {\r",
											"        password.push(allChars[Math.floor(Math.random() * allChars.length)]);\r",
											"    }\r",
											"\r",
											"    // Shuffle the array and join to create final password\r",
											"    return password.sort(() => Math.random() - 0.5).join('');\r",
											"}\r",
											"\r",
											"// Random Address Generator\r",
											"function generateRandomAddress() {\r",
											"    const streets = ['Main St', 'Oak Ave', 'Pine Rd', 'Maple Dr', 'Cedar Ln'];\r",
											"    const cities = [\r",
											"        { city: 'Springfield', state: 'IL', zip: '62704' },\r",
											"        { city: 'Phoenix', state: 'AZ', zip: '85001' },\r",
											"        { city: 'Austin', state: 'TX', zip: '73301' },\r",
											"        { city: 'Denver', state: 'CO', zip: '80202' },\r",
											"        { city: 'Orlando', state: 'FL', zip: '32801' }\r",
											"    ];\r",
											"    \r",
											"    return `${Math.floor(Math.random() * 9999) + 1} ${\r",
											"        streets[Math.floor(Math.random() * streets.length)]\r",
											"    }, ${\r",
											"        cities[Math.floor(Math.random() * cities.length)].city\r",
											"    }, ${\r",
											"        cities[Math.floor(Math.random() * cities.length)].state\r",
											"    } ${String(Math.floor(10000 + Math.random() * 90000)).slice(0,5)}`;\r",
											"}\r",
											"\r",
											"// Random Date of Birth Generator (18-100 years old)\r",
											"function generateRandomDateOfBirth() {\r",
											"    const now = new Date();\r",
											"    const currentYear = now.getFullYear();\r",
											"    const birthYear = currentYear - 18 - Math.floor(Math.random() * 82);\r",
											"    const birthMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');\r",
											"    const birthDay = String(Math.floor(Math.random() * 28) + 1).padStart(2, '0');\r",
											"    const hours = String(Math.floor(Math.random() * 24)).padStart(2, '0');\r",
											"    const minutes = String(Math.floor(Math.random() * 60)).padStart(2, '0');\r",
											"    const seconds = String(Math.floor(Math.random() * 60)).padStart(2, '0');\r",
											"    const milliseconds = String(Math.floor(Math.random() * 1000)).padStart(3, '0');\r",
											"\r",
											"    return `${birthYear}-${birthMonth}-${birthDay}T${hours}:${minutes}:${seconds}.${milliseconds}Z`;\r",
											"}\r",
											"\r",
											"// Set variables for the request\r",
											"pm.environment.set(\"name\", `User_${prefix}`);\r",
											"pm.environment.set(\"email\", `user_${prefix}@example.com`);\r",
											"pm.environment.set(\"password\", generateStrongPassword());\r",
											"pm.environment.set(\"address\", generateRandomAddress());\r",
											"pm.environment.set(\"dateOfBirth\", generateRandomDateOfBirth());\r",
											"pm.environment.set(\"phone\", `+1${Math.floor(1000000000 + Math.random() * 9000000000)}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"address\": \"{{address}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"phone\": \"{{phone}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{baseUrl}}/api/users/signup",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "SignIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify login succeeds\r",
											"pm.test(\"Login - Status 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response has access token\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  \r",
											"  // Check nested \"value\" object\r",
											"  pm.expect(jsonData.value).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.value.accessToken).to.be.a(\"string\");\r",
											"  \r",
											"  // Save tokens to environment variables\r",
											"  pm.environment.set(\"authToken\", jsonData.value.accessToken);\r",
											"  pm.environment.set(\"refreshToken\", jsonData.value.refreshToken);\r",
											"});\r",
											"\r",
											"// Optional: Verify success message\r",
											"pm.test(\"Login successful\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.isSuccess).to.eql(true);\r",
											"  pm.expect(jsonData.message).to.eql(\"Đăng nhập thành công\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"owner@gmail.com\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin SignIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify login succeeds\r",
											"pm.test(\"Login - Status 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response has access token\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  \r",
											"  // Check nested \"value\" object\r",
											"  pm.expect(jsonData.value).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.value.accessToken).to.be.a(\"string\");\r",
											"  \r",
											"  // Save tokens to environment variables\r",
											"  pm.environment.set(\"adminToken\", jsonData.value.accessToken);\r",
											"  pm.environment.set(\"refreshToken\", jsonData.value.refreshToken);\r",
											"});\r",
											"\r",
											"// Optional: Verify success message\r",
											"pm.test(\"Login successful\", () => {\r",
											"  const jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.isSuccess).to.eql(true);\r",
											"  pm.expect(jsonData.message).to.eql(\"Đăng nhập thành công\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminEmail}}\",\r\n  \"password\": \"{{adminPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{baseUrl}}/api/users/login",
									"protocol": "http",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as Driver",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{driverEmail}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login as Owner",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{ownerEmail}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}